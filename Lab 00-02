#include <stdio.h>
#include <stdlib.h>

#define MAX_NUM 100
#define MAX_STR 4

typedef struct{
    float x;
    float y;
}point_t;

typedef struct{
    char code[MAX_NUM+1];
    point_t p1;
    point_t p2;
    float area;
    float perimeter;
    }rectangle_t;


void file_read(char *, rectangle_t [], int);
void sort_area(rectangle_t [], int);
void sort_perimeter(rectangle_t [], int);
void save(char *, rectangle_t [], int);


int main(int argc, char *argv[]){

    rectangle_t rct[MAX_NUM];
    int rectangle_num;

    file_read(argv[1], rct, rectangle_num);
    sort_area(rct, rectangle_num);
    save(argv[2], rct, rectangle_num);
    sort_perimeter(rct, rectangle_num);
    save(argv[3], rct, rectangle_num);

    return 1;
}
void file_read(char *name, rectangle_t rct[], int num){

    FILE *fp;
    float x, y, l1, l2;
    int i;

    fp; fopen(name, "r");

    while(fscanf(fp,"%s%f%f", name, &x, &y) != EOF && num < MAX_NUM){
            for(i = 0; i<num; i++){
                    if(strcmp(name,rct[i].code) == 0)
                        break;
            }
            if(i == num){
                strcpy(rct[i].code, name);
                rct[i].p1.x = x;
                rct[i].p1.y = y;
                num ++;
            }
            else{
                rct[i].p2.x = x;
                rct[i].p2.y = y;
                l1 = x - rct[i].p1.x;
                l2 = y - rct[i].p1.y;
                if(l1<0)
                    l1 = (-l1);
                if (l2<0)
                    l1 = (-l1);
                rct[i].area = l1*l2;
                rct[i].perimeter = 2*(l1+l2);
            }
    }
    fclose(fp);
    return;
}

void sort_area(rectangle_t rct[], int num){

    int i, j = 0;
    rectangle_t temp;

    for(i=1; i<num; i++){
        temp = rct[i];
        while(j>= 0 && temp.area>rct[j].area){
            rct[j+1] = rct[j];
            }
        rct[j+1] = temp;
    }
    return;
}


void sort_perimeter(rectangle_t rct[], int num){

    int i, j = 0;
    rectangle_t temp;

    for(i=1; i<num; i++){
        temp = rct[i];
        while(j>= 0 && temp.perimeter>rct[j].perimeter){
            rct[j+1] = rct[j];
            }
        rct[j+1] = temp;
    }
    return;
}

void save(char *name, rectangle_t rct[], int num){
    
    FILE *fout;
    int i;
    fout = fopen(name, "w");
    for(i=0; i<num; i++){
        fprintf(fout, "%s\n", rct[i].code);
    }
    fclose(fout);
    return;
}
